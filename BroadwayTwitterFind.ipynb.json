{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "RateLimitError",
     "evalue": "[{u'message': u'Rate limit exceeded', u'code': 88}]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRateLimitError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-497cb0cf8402>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-20-497cb0cf8402>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m    109\u001b[0m     \u001b[0mtweet_printer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTweetPrinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pn71sZ77MiXC9JPoQLsY28fOq'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CYZjKjYlOIpOVL6uY6G0jZFwb8GmC58mS2JSZNyor0nlHilsN8'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'1534453573-qahfjF2eznfqm5HKHn4sTxsu32OH4fuYRdrXTxF'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'5A2r5yCTZ9qRpww1lLFcLme9OJPIlCTJx4amKlAnftlCZ'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 111\u001b[0;31m     \u001b[0mtweet_printer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtweet_print\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-20-497cb0cf8402>\u001b[0m in \u001b[0;36mtweet_print\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m             \u001b[0;31m#reminder -- count automatically set to 15\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m             \u001b[0mbroadway_tweets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msearch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mq\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m             \u001b[0;31m#search thru each tweet\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/macdonaldkenzie/anaconda2/lib/python2.7/site-packages/tweepy/binder.pyc\u001b[0m in \u001b[0;36m_call\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    248\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    249\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 250\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    251\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    252\u001b[0m     \u001b[0;31m# Set pagination mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/macdonaldkenzie/anaconda2/lib/python2.7/site-packages/tweepy/binder.pyc\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    230\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mis_rate_limit_error_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mRateLimitError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mTweepError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror_msg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapi_code\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mapi_error_code\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRateLimitError\u001b[0m: [{u'message': u'Rate limit exceeded', u'code': 88}]"
     ]
    }
   ],
   "source": [
    "import tweepy\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "consumer_key = 'pn71sZ77MiXC9JPoQLsY28fOq'\n",
    "consumer_secret = 'CYZjKjYlOIpOVL6uY6G0jZFwb8GmC58mS2JSZNyor0nlHilsN8'\n",
    "access_token = '1534453573-qahfjF2eznfqm5HKHn4sTxsu32OH4fuYRdrXTxF'\n",
    "access_token_secret = '5A2r5yCTZ9qRpww1lLFcLme9OJPIlCTJx4amKlAnftlCZ'\n",
    "\n",
    "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_token_secret)\n",
    "api = tweepy.API(auth)\n",
    "\n",
    "\n",
    "#simple class to print tweets\n",
    "class TweetPrinter():\n",
    "    def __init__(self, consumer_key, consumer_secret, access_token, \n",
    "                 access_token_secret):\n",
    "        self.consumer_key = consumer_key\n",
    "        self.consumer_secret = consumer_secret\n",
    "        self.access_token = access_token\n",
    "        self.access_token_secret = access_token_secret\n",
    "        self.auth = tweepy.OAuthHandler(self.consumer_key, \n",
    "                                        self.consumer_secret)\n",
    "        self.auth.set_access_token(access_token, access_token_secret)\n",
    "\n",
    "    def tweet_print(self):\n",
    "        api = tweepy.API(self.auth)\n",
    "        \n",
    "        #define variables\n",
    "        bestShow = \"\"\n",
    "        bestCount = 0\n",
    "        \n",
    "        #create needed lists\n",
    "        positiveList = createWordList(\"https://www.enchantedlearning.com/wordlist/positivewords.shtml\")\n",
    "        negativeList = createWordList(\"https://www.enchantedlearning.com/wordlist/negativewords.shtml\")\n",
    "        offBroadwayShows = createBroadwayList()\n",
    "        \n",
    "        for show in offBroadwayShows:\n",
    "            positiveCount = 0\n",
    "            negativeCount = 0\n",
    "            neutralCount = 0\n",
    "            wordFound = False\n",
    "            \n",
    "            #reminder -- count automatically set to 15\n",
    "            broadway_tweets = api.search(q=show)\n",
    "        \n",
    "            #search thru each tweet\n",
    "            for tweet in broadway_tweets:\n",
    "                #find positive words in tweet\n",
    "                for word in positiveList:\n",
    "                    if word in tweet.text:\n",
    "                        positiveCount += 1\n",
    "                        wordFound = True\n",
    "        \n",
    "                #find negative words in tweet\n",
    "                for word in negativeList:\n",
    "                    if word in tweet.text:\n",
    "                        negativeCount += 1\n",
    "                        wordFound = True\n",
    "            \n",
    "                #check to see if any positive/negative words were found\n",
    "                if wordFound == False:\n",
    "                    neutralCount += 1\n",
    "            \n",
    "            if (positiveCount - negativeCount) > bestCount:\n",
    "                bestCount = positiveCount - negativeCount\n",
    "                bestShow = show\n",
    "        \n",
    "            printResults(show, negativeCount, positiveCount)\n",
    "            \n",
    "        print('It looks like the most liked show is ' + bestShow + '. Go see it before it goes on Broadway!')\n",
    "            \n",
    "def createWordList(link):\n",
    "    #create a list of positive words\n",
    "    result = requests.get(link)\n",
    "    src = result.content\n",
    "    soup = BeautifulSoup(src, 'html')\n",
    "    myList = []\n",
    "    \n",
    "    for div_tag in soup.find_all('div', attrs={'class': 'wordlist-item'}):\n",
    "        word = div_tag.text\n",
    "        myList.append(word)\n",
    "    \n",
    "    return myList\n",
    "\n",
    "def createBroadwayList():\n",
    "    #create list of off broadway shows\n",
    "    offBroadwayShows = []\n",
    "    result = requests.get(\"http://www.playbill.com/productions?q=&venue-type=offbroadway&zip=\")\n",
    "    src = result.content\n",
    "    soup = BeautifulSoup(src, 'html')\n",
    "\n",
    "    for div_tag in soup.find_all('div', attrs={'class': 'pb-pl-tile-title'}):\n",
    "        title = div_tag.text\n",
    "        title = title[37:]\n",
    "        title = title[:-33]\n",
    "        offBroadwayShows.append(title)\n",
    "    \n",
    "    return offBroadwayShows\n",
    "\n",
    "def printResults(show, negativeCount, positiveCount):\n",
    "    print('Show: '+ show)\n",
    "    print('Positive: ' + str(positiveCount))\n",
    "    print('Negative: ' + str(negativeCount))\n",
    "                                  \n",
    "                                  \n",
    "def main():\n",
    "    tweet_printer = TweetPrinter(consumer_key, consumer_secret, access_token, access_token_secret)\n",
    "    \n",
    "    tweet_printer.tweet_print()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
